:-  :~  navhome/'/docs/'
    ==
;>

# 2a: unit logic

### `++biff`

Unit as argument

Applies a function `b` that produces a unit to the unwrapped value of ++unit
`a` (`u.a`). If `a` is empty, `~` is produced.

## Accepts

`a` is a unit.

`b` is a function that accepts a noun and produces a unit.

## Produces

A unit.

## Source

```
++  biff                                                ::  apply
  |*  {a/(unit) b/$-(* (unit))}
  ?~  a  ~
  (b u.a)
```

## Examples

```
> (biff (some 5) |=(a/@ (some (add a 2))))
[~ u=7]
> (biff ~ |=(a/@ (some (add a 2))))
~
```

---

### `++bind`

Non-unit function to unit, producing unit

Applies a function `b` to the value (`u.a`) of a ++unit `a`, producing
a unit. Used when you want a function that does not accept or produce a
unit to both accept and produce a unit.

## Accepts

`a` is a unit.

`b` is a function.

## Produces

A unit.

## Source

```
++  bind                                                ::  argue
  |*  {a/(unit) b/gate}
  ?~  a  ~
  [~ u=(b u.a)]
```

## Examples

```
> (bind ((unit @) [~ 97]) ,@t)
[~ `a`]
> =a |=(a/@ (add a 1))
> (bind ((unit @) [~ 2]) a)
[~ 3]
```

---

### `++bond`

Replace null

Replaces an empty ++unit `b` with the product of a called trap
`a`. If the unit is not empty, then the original unit is produced.

## Accepts

`a` is a trap.

`b` is a unit.

## Produces

Either the product of `a` or the value inside of unit `b`.

## Source

```
++  bond                                                ::  replace
  |*  a/(trap)
  |*  b/(unit)
  ?~  b  $:a
  u.b
```

## Examples

```
> (bex 10)
1.024
> ((bond |.((bex 10))) ~)
1.024
> ((bond |.((bex 10))) (slaw %ud '123'))
123
```

---

### `++both`

Group unit values into pair

Produces `~` if either `a` or `b` are empty. Otherwise, produces a
++unit whose value is a cell of the values of two input units `a` and
`b`.

## Accepts

`a` is a unit.

`b` is a unit.

## Produces

A unit of the two initial values.

## Source

```
++  both                                                ::  all the above
  |*  {a/(unit) b/(unit)}
  ?~  a  ~
  ?~  b  ~
  [~ u=[u.a u.b]]
```

## Examples

```
> (both (some 1) (some %b))
[~ u=[1 %b]]
> (both ~ (some %b))
~
```

---

### `++clap`

Apply function to two units

Applies a binary function `c`--which does not usually accept or produce a `++unit`--
to the values of two units, `a` and `b`, producing a unit.

## Accepts

`a` is a unit.

`b` is a unit.

`c` is a function that performs a binary operation.

## Produces

A unit.

## Source

```
++  clap                                                ::  combine
  |*  {a/(unit) b/(unit) c/_|=(^ +<-)}
  ?~  a  b
  ?~  b  a
  [~ u=(c u.a u.b)]
```

## Examples

```
> =u ((unit @t) [~ 'a'])
> =v ((unit @t) [~ 'b'])
> (clap u v |=([a=@t b=@t] (welp (trip a) (trip b))))
[~ u="ab"] 
> =a ((unit @u) [~ 1])
> =b ((unit @u) [~ 2])
> =c |=([a=@ b=@] (add a b))
> (clap a b c)
[~ 3]
```

---

### `++drop`

Unit to list

Makes a ++list of the unwrapped value (`u.a`) of a `++unit` `a`.

## Accepts

`a` is a unit.

## Produces

A list.

## Source

```
++  drop                                                ::  enlist
  |*  a/(unit)
  ?~  a  ~
  [i=u.a t=~]
```

## Examples

```
> =a ((unit @) [~ 97])
> (drop a)
[i=97 t=~] 
> =a ((unit @) [~])
> (drop a)
~
```

---

### `++fall`

Give unit a default value

Produces a default value `b` for a `++unit` `a` in cases where `a` is null.

## Accepts

`a` is a unit.

`b` is a noun that's used as the default value.

## Produces

Either a noun `b` or the unwrapped value of unit `a`.

## Source

```
++  fall                                                ::  default
  |*  {a/(unit) b/*}
  ?~(a b u.a)
```

## Examples

```
> (fall ~ `a`)
`a`
> (fall [~ u=0] `a`)
0
```

---

### `++lift`

Curried bind

Accepts a `++gate` `a` and produces a function that accepts `++unit`
`b` to which it applies `a`. Used when you want a function that does not accept
or produce a unit to both accept and produce a unit.

## Accepts

`a` is a gate.

`b` is a unit.

## Produces

A unit.

## Source

```
++  lift                                                ::  lift gate (fmap)
  |*  a/gate                                            ::  flipped
  |*  b/(unit)                                          ::  curried
  (bind b a)                                            ::  bind
```

## Examples

```
> ((lift dec) `(unit @)`~)
~
> ((lift dec) `(unit @)`[~ 20])
[~ 19]
```

---

### `++mate`

Choose

Accepts two units `a` and `b` whose values are expected to be
equivalent. If either is empty, then the value of the other is produced.
If neither are empty, it asserts that both values are the same and
produces that value. If the assertion fails, `++mate` crashes with
`'mate'` in the stack trace.

## Accepts

`a` is a unit.

`b` is a unit.

## Produces

A unit or crash.

## Source

```
++  mate                                                ::  choose
  |*  {a/(unit) b/(unit)}
  ?~  b  a
  ?~  a  b
  ?.(=(u.a u.b) ~|('mate' !!) a)
```

## Examples

```
> =a ((unit @) [~ 97])
> =b ((unit @) [~ 97])
> (mate a b)
[~ 97]
> =a ((unit @) [~ 97])
> =b ((unit @) [~])
> (mate a b)
[~ 97]
> =a ((unit @) [~ 97])
> =b ((unit @) [~ 98])
> (mate a b)
! 'mate'
! exit
```

---

### `++need`

Unwrap unit

Retrieve the value from a `++unit` and crash if the unit is null.

## Accepts

`a` is a unit.

## Produces

Either the unwrapped value of `a` (`u.a`), or crash.

## Source

```
++  need                                                ::  demand
  |*  a/(unit)
  ?~  a  ~|(%need !!)
  u.a
```

## Examples

```
> =a ((unit [@t @t]) [~ ['a' 'b']])
> (need a)
['a' 'b']
> =a ((unit @ud) [~ 17])
> (need a)
17
> =a ((unit @) [~])
> (need a)
! exit
```

---

### `++some`

Wrap value in a unit

Takes any atom `a` and produces a [`++unit`]() with the value set to `a`.

## Accepts

`a` is a [noun]().

## Produces

A unit.

## Source

```
++  some                                                ::  lift (pure)
  |*  a=*
  [~ u=a]
```

## Examples

```
> (some [`a` `b`])
[~ u=[`a` `b`]]
> (some &)
[~ u=%.y]
```

---

